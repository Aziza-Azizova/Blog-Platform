"use strict";Object.defineProperty(exports,"__esModule",{value:true});const _mongoose=/*#__PURE__*/_interop_require_default(require("mongoose"));const _supertest=/*#__PURE__*/_interop_require_default(require("supertest"));const _dotenv=/*#__PURE__*/_interop_require_default(require("dotenv"));const _app=require("../app");const _mongodbmemoryserver=require("mongodb-memory-server");const _Usermodel=require("../modules/user/User.model");function _interop_require_default(obj){return obj&&obj.__esModule?obj:{default:obj}}_dotenv.default.config();let mongoServer;describe("User sign up route",()=>{beforeAll(async()=>{mongoServer=await _mongodbmemoryserver.MongoMemoryServer.create();const uri=mongoServer.getUri();await _mongoose.default.disconnect();await _mongoose.default.connect(uri)});afterEach(async()=>{await _mongoose.default.connection.collection("users").deleteMany({})});it("should return 201 status and register a new user",async()=>{const res=await (0,_supertest.default)(_app.app).post("/auth/signup").send({email:"test@example.com",username:"Username",password:"password123"});expect(res.statusCode).toBe(201);expect(res.body.message).toBe("User successfully registered");expect(res.body.user).toBeDefined();expect(res.body.user.email).toBe("test@example.com")});it("should return 409 if email exists",async()=>{await _Usermodel.User.create({email:"existing@example.com",username:"Existing User",password:"password123"});const res=await (0,_supertest.default)(_app.app).post("/auth/signup").send({email:"existing@example.com",username:"Existing User",password:"password123"});expect(res.statusCode).toBe(409);expect(res.body.message).toBe("Email already exists")});afterAll(async()=>{await _mongoose.default.connection.close();await mongoServer.stop()})});describe("User login route",()=>{beforeAll(async()=>{mongoServer=await _mongodbmemoryserver.MongoMemoryServer.create();const uri=mongoServer.getUri();await _mongoose.default.disconnect();await _mongoose.default.connect(uri)});afterEach(async()=>{await _mongoose.default.connection.collection("users").deleteMany({})});it("should return 200 status and log in user",async()=>{await _Usermodel.User.create({email:"test@example.com",username:"Test User",password:"password123"});const res=await (0,_supertest.default)(_app.app).post("/auth/login").send({email:"test@example.com",password:"password123"});expect(res.statusCode).toBe(200);expect(res.body.message).toBe("User successfully logged in");expect(res.body.user).toBeDefined();expect(res.body.token).toBeDefined()});it("should return 401 status if password is wrong",async()=>{await _Usermodel.User.create({email:"test@example.com",username:"Username",password:"password123"});const res=await (0,_supertest.default)(_app.app).post("/auth/login").send({email:"test@example.com",password:"wrongPassword"});expect(res.statusCode).toBe(401);expect(res.body.message).toBe("Wrong password")});afterAll(async()=>{await _mongoose.default.connection.close();await mongoServer.stop()})});